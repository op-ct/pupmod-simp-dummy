# The testing matrix considers ruby/puppet versions supported by SIMP and PE:
# ------------------------------------------------------------------------------
# Release       Puppet   Ruby    EOL
# SIMP 6.4      5.5      2.40    TBD
# PE 2018.1     5.5      2.40    2021-01 (LTS overlap)
# PE 2019.8     6.18     2.5     2022-12 (LTS)
#
# https://puppet.com/docs/pe/2018.1/component_versions_in_recent_pe_releases.html
# https://puppet.com/misc/puppet-enterprise-lifecycle
# https://puppet.com/docs/pe/2018.1/overview/getting_support_for_pe.html
# ==============================================================================
#
# GitHub Action Secrets variables available for this pipeline:
#
#   GitHub Secret variable    Type      Notes
#   ------------------------  --------  ----------------------------------------
#   GITLAB_API_PRIVATE_TOKEN  Secure    Only provided to jobs that need it
#   GITLAB_API_URL            Optional
#
#   The secure vars will be filtered in GitHub Actions log output, and aren't
#   provided to untrusted builds (i.e, triggered by PR from another repository)
#
# ------------------------------------------------------------------------------

name: Tests
on:
  push: {}
  pull_request:
    types: [opened, reopened, edited]

env:
  GITLAB_SERVER_URL: ${{ secrets.GITLAB_SERVER_URL }} # https://gitlab.com
  GITLAB_API_URL: ${{ secrets.GITLAB_API_URL }}       # https://gitlab.com/api/v4
  GITLAB_ORG: 'simp'
  PUPPET_VERSION: '~> 6'

jobs:
  puppet-syntax:
    name: 'Puppet Syntax'
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: "Install Ruby ${{matrix.puppet.ruby_version}}"
        uses: ruby/setup-ruby@v1  # ruby/setup-ruby@ec106b438a1ff6ff109590de34ddc62c540232e0
        with:
          ruby-version: 2.5
          bundler-cache: true
      - run: "bundle exec rake syntax"

  puppet-style:
    name: 'Puppet Style'
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: "Install Ruby ${{matrix.puppet.ruby_version}}"
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.5
          bundler-cache: true
      - run: "bundle exec rake lint"
      - run: "bundle exec rake metadata_lint"

  ruby-style:
    name: 'Ruby Style (experimental)'
    runs-on: ubuntu-18.04
    continue-on-error: true
    steps:
      - uses: actions/checkout@v2
      - name: "Install Ruby ${{matrix.puppet.ruby_version}}"
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.5
          bundler-cache: true
      - run: "bundle exec rake rubocop"

  glci-style:
    name: '.gitlab-ci.yml Style (experimental)'
    continue-on-error: true
    runs-on: ubuntu-16.04
    steps:
      - uses: actions/checkout@v2
      - name: "Install Ruby ${{matrix.puppet.ruby_version}}"
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.5
          bundler-cache: true
      - run: bundle exec rake simp:ci_lint

  files:
    name: 'File checks'
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: 'Install Ruby ${{matrix.puppet.ruby_version}}'
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.5
          bundler-cache: true
      - run: bundle exec rake check:dot_underscore
      - run: bundle exec rake check:test_file


  releng-checks:
    name: 'RELENG checks'
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: 'Install Ruby ${{matrix.puppet.ruby_version}}'
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.5
          bundler-cache: true

      - name: 'Tags and changelogs'
        run: |
          bundle exec rake pkg:check_version
          bundle exec rake pkg:compare_latest_tag
          bundle exec rake pkg:create_tag_changelog

      - name: 'Test-build the Puppet module'
        run: 'bundle exec pdk build --force'

  glci-syntax:
    name: '.gitlab-ci.yml Syntax'
    runs-on: ubuntu-16.04
    steps:
      - uses: actions/checkout@v2
      - name: 'Validate GLCI file'
        run: |
         GITLAB_API_URL="${GITLAB_API_URL:-https://gitlab.com/api/v4}"
         status=$( jq --null-input --arg yaml "$(<.gitlab-ci.yml)" '.content=$yaml'  | curl "${GITLAB_API_URL}/ci/lint?include_merged_yaml=true" --silent --show-error --header 'Content-Type: application/json' --data @- | jq .status )
         [[ "$status" == '"valid"' ]] && echo '.gitlab-ci.yml is valid' || false


  spec-tests:
    name: 'Puppet Spec Tests'
    needs: [puppet-syntax]
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        # fail-fast: false
        puppet:
          - label: 'Puppet 6.18 [SIMP 6.5/PE 2019.8]'
            puppet_version: '~> 6.18.0'
            ruby_version: '2.5'
          - label: 'Puppet 5.5 [SIMP 6.4/PE 2018.1]'
            puppet_version: '~> 5.5.22'
            ruby_version: '2.4'
          - label: 'Puppet 7.x'
            puppet_version: '~> 7.0'
            ruby_version: '2.7'
    env:
      PUPPET_VERSION: '${{matrix.puppet.puppet_version}}'
    steps:
      - uses: actions/checkout@v2
      - name: 'Install Ruby ${{matrix.puppet.ruby_version}}'
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{matrix.puppet.ruby_version}}
          bundler-cache: true
      - run: 'command -v rpm || if command -v apt-get; then apt-get update; apt-get install -y rpm; fi ||:'
      - run: 'bundle exec rake spec'


  trigger-if-user-has-repo-permissions:
    name: 'Trigger CI (if permitted)'
    ### if: ${{ GITHUB_REPOSITORY_OWNER == 'simp' }}
    if:  github.event_name == 'pull_request' &&  github.event.pull_request.merged == 'false' # <-- the gitlab mirror will pick up the change
    continue-on-error: true

    needs: [puppet-syntax, glci-syntax, files, puppet-style, spec-tests]
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/github-script@v3
        id: user-repo-permissions
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          # See:
          #   - https://octokit.github.io/rest.js/
          #   - https://docs.github.com/en/free-pro-team@latest/rest/reference/repos#get-repository-permissions-for-a-user
          script: |
            const project_permission = await github.request('GET /repos/{owner}/{repo}/collaborators/{username}/permission', {
              headers: {
                accept: 'application/vnd.github.v3+json'
              },
              owner: context.repo.owner,
              repo: context.repo.repo,
              username: context.payload.sender.login,
            })
            const has_write_access = perm_lvl => (perm_lvl == "admin" || perm_lvl == "write" )
            const write_access_desc = perm_bool => (perm_bool ? "PERMISSION OK" : "PERMISSION DENIED" )
            console.log(`== payload user '${context.payload.sender.login}' CI trigger permission for '${context.repo.owner}': ${write_access_desc(has_write_access(project_permission.data.permission))}`)
            return(has_write_access(project_permission.data.permission))

      # Secon
      # - [ ] if there's no GitLab mirror, make one
      # - [ ] if there's no GitLab <-> GitHub integration, make one
      # - [ ] if there's no PR check, make one (?)
      # - [X] if there are already pipelines pending/running for this branch, CANCEL THEM
      #       - "created|waiting_for_resource|preparing|pending|running"
      # - [ ] if PR: force-push branch to GitLab
      #       - if
      - name: Trigger when user has Repo Permissions
        if: steps.user-repo-permissions.outputs.result == 'true'
        env:
          ### GITLAB_SERVICE_ACCOUNT:  ${{ secrets.GITLAB_SERVICE_ACCOUNT }}
          GITLAB_API_PRIVATE_TOKEN: ${{ secrets.GITLAB_API_PRIVATE_TOKEN }}
        run: |
          GITLAB_SERVER_URL="${GITLAB_SERVER_URL:-https://gitlab.com}"
          GITLAB_API_URL="${GITLAB_API_URL:-${GITLAB_SERVER_URL}/api/v4}"
          GIT_BRANCH=${GITHUB_REF:11}
          [ $GITHUB_EVENT_NAME == 'pull_request' ] && GIT_BRANCH="$GITHUB_HEAD_REF"
          GITXXB_REPO_NAME="${GITHUB_REPOSITORY/$GITHUB_REPOSITORY_OWNER\//}"
          # --http1.0 avoids an HTTP/2 load balancing issue when run from GA
          CURL_CMD=(curl --http1.0 --fail --silent --show-error \
            --header "Authorization: Bearer $GITLAB_API_PRIVATE_TOKEN" \
            --header "Content-Type: application/json" \
            --header "Accept: application/json" \
          )

          ###GITLAB_PROJECT_ID="$("${CURL_CMD[@]}" "${GITLAB_API_URL}/projects/${GITLAB_ORG}%2F${GITXXB_REPO_NAME}" | jq .id )"
          GITLAB_PROJECT_ID="${GITLAB_ORG}%2F${GITXXB_REPO_NAME}"
          echo "Gitlab project ID: '$GITLAB_PROJECT_ID'"

          # Cancel any active/pending GitLab CI pipelines for the same project+branch
          active_pipeline_ids=()
          for pipe_status in created waiting_for_resource preparing pending running; do
            echo "  ---- checking for CI pipelines with status '$pipe_status' for project '$GITLAB_PROJECT_ID', branch '$GIT_BRANCH'"
            active_pipelines="$("${CURL_CMD[@]}" "${GITLAB_API_URL}/projects/${GITLAB_PROJECT_ID}/pipelines?ref=${GIT_BRANCH}&status=${pipe_status}" | jq -r '.[] | .id , .web_url')"
            active_pipeline_ids+=($(echo "$active_pipelines" |  grep -E '^[0-9]*$'))
            echo "$active_pipelines"
            echo
          done
          if [ "${#active_pipeline_ids[@]}" -gt 0 ]; then
            printf "\nFound %s active pipeline ids:\n" "${#active_pipeline_ids[@]}"
            echo "${active_pipeline_ids[@]}"
            for pipe_id in "${active_pipeline_ids[@]}"; do
              printf "\n  ------ Cancelling pipeline ID %s...\n" "$pipe_id"
              "${CURL_CMD[@]}" --request POST "${GITLAB_API_URL}/projects/${GITLAB_PROJECT_ID}/pipelines/${pipe_id}/cancel"
            done
          else
            echo No active pipelines found
          fi

          echo "== Pushing $GIT_BRANCH to gitlab"
          git remote add gitlab "https://oauth2:${GITLAB_API_PRIVATE_TOKEN}@${GITLAB_SERVER_URL#*://}/${GITLAB_ORG}/${GITXXB_REPO_NAME}.git"
          git branch -av
          git push gitlab "$GIT_BRANCH" -f

      - name: When user does NOT have Repo Permissions
        if: steps.user-repo-permissions.outputs.result == 'false'
        continue-on-error: true
        run: false



#  trigger-if-user-has-project-permissions:
#    name: "Trigger if user has Project Permissions"
#    needs: [syntax, glci-syntax, releng-checks, files, puppet-style, spec-tests]
#    runs-on: ubuntu-18.04
#    steps:
#      - uses: actions/github-script@v3
#        id: user-project-permissions
#        with:
#          github-token: ${{secrets.GITHUB_TOKEN}}
#          # See:
#          #   - https://octokit.github.io/rest.js/
#          #   - https://docs.github.com/en/free-pro-team@latest/rest/reference/projects#get-project-permission-for-a-user
#          script: |
#            const project_permission = await github.request('GET /repos/{owner}/{repo}/collaborators/{username}/permission', {
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              username: context.payload.sender.login,
#              mediaType: { previews: [ 'inertia' ] }
#            })
#            const has_write_access = perm_lvl => (perm_lvl == "admin" || perm_lvl == "write" )
#            const write_access_desc = perm_bool => (perm_bool ? "PERMISSION OK" : "PERMISSION DENIED" )
#            console.log(`=== payload user '${context.payload.sender.login}' for '${context.repo.owner}': ${write_access_desc(has_write_access(project_permission.data.permission))}`)
#            return(has_write_access(project_permission.data.permission))
#
#
#      - name: Trigger if user has Project Permissions
#        if: steps.user-project-permissions.outputs.result == 'true'
#        env:
#          GITLAB_API_URL: ${{ secrets.GITLAB_API_URL }}
#          GITLAB_API_PRIVATE_TOKEN: ${{ secrets.GITLAB_API_PRIVATE_TOKEN }}
#        run: |
#           echo "GOOD User has write access to ${GITHUB_REPOSITORY}; permittedd to trigger remote PR check"
